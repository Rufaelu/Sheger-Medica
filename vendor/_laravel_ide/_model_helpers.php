<?php

namespace App\Models {

    /**
     * App\Models\Admin_logs
     *
     * @property-read \App\Models\User $admin
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs query()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin_logs|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Admin_logs extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Articles
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('draft','published') $status
     * @property bigint(20) unsigned $author_id
     * @property string $content
     * @property string $title
     * @property int $article_id
     * @property-read \App\Models\User $author
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereArticleId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereContent($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereAuthorId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles query()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Articles cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Articles|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Articles extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Herb_remedy
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bigint(20) unsigned $remedy_id
     * @property bigint(20) unsigned $herb_id
     * @property int $id
     * @property-read \App\Models\Herbs $herb
     * @property-read \App\Models\Remedies $remedy
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereHerbId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereRemedyId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy query()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Herb_remedy|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Herb_remedy extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Herbs
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bigint(20) unsigned $posted_by
     * @property string|null $image_path
     * @property string|null $risks
     * @property string $benefits
     * @property string|null $region
     * @property string|null $scientific_name
     * @property string $local_name
     * @property int $herb_id
     * @property-read \App\Models\User $user
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Remedies> $remedies
     * @property-read int|null $remedies_count
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereHerbId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereLocalName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereScientificName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereRegion($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereBenefits($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereRisks($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereImagePath($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs wherePostedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs query()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Herbs|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Herbs extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Remedies
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bigint(20) unsigned $posted_by
     * @property string $ailment
     * @property string|null $dosage
     * @property string $preparation_steps
     * @property string $title
     * @property int $remedy_id
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Herbs> $herb
     * @property-read int|null $herb_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Herbs> $herbs
     * @property-read int|null $herbs_count
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereRemedyId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies wherePreparationSteps($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereDosage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereAilment($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies wherePostedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies query()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Remedies|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Remedies extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\User
     *
     * @property string|null $remember_token
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $certificate
     * @property string|null $profile_picture
     * @property enum('pending','approved','rejected')|null $approval_status
     * @property decimal(3,2)|null $average_rating
     * @property string|null $specialties
     * @property string|null $bio
     * @property string|null $phone
     * @property string|null $google_id
     * @property enum('male','female')|null $gender
     * @property date|null $dob
     * @property blob $password
     * @property string $email
     * @property string $last_name
     * @property string $first_name
     * @property int $user_id
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Herbs> $herbs
     * @property-read int|null $herbs_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Remedies> $remedies
     * @property-read int|null $remedies_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Reviews> $reviews
     * @property-read int|null $reviews_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Bookmarks> $bookmarks
     * @property-read int|null $bookmarks_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Articles> $articles
     * @property-read int|null $articles_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Admin_logs> $adminLogs
     * @property-read int|null $adminLogs_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Role> $roles
     * @property-read int|null $roles_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Permission> $permissions
     * @property-read int|null $permissions_count
     * @method static \Illuminate\Database\Eloquent\Builder|User whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereFirstName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereLastName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDob($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereGender($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereGoogleId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBio($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereSpecialties($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAverageRating($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereApprovalStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereProfilePicture($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCertificate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRememberToken($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User role()
     * @method static \Illuminate\Database\Eloquent\Builder|User withoutRole()
     * @method static \Illuminate\Database\Eloquent\Builder|User permission()
     * @method static \Illuminate\Database\Eloquent\Builder|User withoutPermission()
     * @method static \Illuminate\Database\Eloquent\Builder|User newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|User newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|User query()
     * @method static \Illuminate\Database\Eloquent\Builder|User select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|User addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|User lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|User sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|User beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|User afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|User setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|User useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|User clone()
     * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|User dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|User dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|User tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|User|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|User|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class User extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}